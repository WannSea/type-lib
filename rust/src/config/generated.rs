use super::MetricType;
use strum_macros::EnumString;

#[allow(non_camel_case_types)]
#[derive(EnumString, Clone, Copy)]
pub enum MetricId {
    GPS_LON = 0,
    GPS_LAT = 1,
    GPS_SPEED = 2,
    GPS_COURSE = 3,
    GPS_ALTITUDE = 4,
    GPS_HOR_ERROR = 5,
    GPS_VELO_UNCERTAINTY = 6,
    GPS_VERT_UNCERTAINTY = 7,
    ACCELERATION_Y = 8,
    ACCELERATION_Z = 9,
    GYRO_X = 10,
    GYRO_Y = 11,
    GYRO_Z = 12,
    ROTATION_X = 13,
    ROTATION_Y = 14,
    ROTATION_Z = 15,
    FILTER_LON = 16,
    FILTER_LAT = 17,
    FILTER_ALTITUDE = 18,
    FILTER_SPEED = 19,
    FILTER_ROT_X = 20,
    FILTER_ROT_Y = 21,
    FILTER_ROT_Z = 22,
    APMU_TEMP = 23,
    MPMU_TEMP = 24,
    MOTOR_CURRENT = 25,
    BATTERY_VOLTAGE = 26,
    FAN_1 = 27,
    FAN_2 = 28,
    FAN_3 = 29,
    FAN_4 = 30,
    SOLAR_POWER = 31,
    SOLAR_TEMP = 32,
    MOTOR_TEMP = 33,
    MOTOR_INVERTER_TEMP = 34,
    MOTOR_BATTERY_VOLTAGE = 35,
    MOTOR_RPM = 36,
    MOTOR_POWER = 37,
    MOTOR_STATE = 38,
    ECU_MOTOR_CURRENT = 39,
    MOTOR_THROTTLE_POS = 40,
    MAX_BATTERY_DISCHARGE_CURRENT = 41,
    MAX_BATTERY_RECHARGE_CURRENT = 42,
    GLOBAL_SOC = 43,
    ID_GLOBAL_SOC = 44,
    GLOBAL_IBMS_ALARM_STATE = 45,
    NUMBER_OF_CONNECTED_BMS = 46,
    POWERBUS_INFORMATION = 47,
    BAT_TMIN = 48,
    BAT_TMAX = 49,
    BAT_ID_TMIN = 50,
    BAT_ID_TMAX = 51,
    BAT_VMIN = 52,
    BAT_VMAX = 53,
    BAT_ID_VMIN = 54,
    BAT_ID_VMAX = 55,
    GLOBAL_BAT_CURRENT = 56,
    GLOBAL_CELL_MIN = 57,
    GLOBAL_CELL_MAX = 58,
    GLOBAL_CELL_MIN_ID = 59,
    GLOBAL_CELL_MAX_ID = 60,
    BAT_1_AH_DISCHARGED = 61,
    BAT_1_SOC = 62,
    BAT_1_SOH = 63,
    BAT_1_I_BAT_I = 64,
    BAT_1_REMAINING_CAPACITY = 65,
    BAT_1_T0 = 66,
    BAT_1_T1 = 67,
    BAT_1_T2 = 68,
    BAT_1_MAJOR_ALERT_1 = 69,
    BAT_1_MAJOR_ALERT_2 = 70,
    BAT_1_MAJOR_ALERT_3 = 71,
    BAT_1_MINOR_ALERT = 72,
    BAT_2_AH_DISCHARGED = 73,
    BAT_2_SOC = 74,
    BAT_2_SOH = 75,
    BAT_2_I_BAT_I = 76,
    BAT_2_REMAINING_CAPACITY = 77,
    BAT_2_T0 = 78,
    BAT_2_T1 = 79,
    BAT_2_T2 = 80,
    BAT_2_MAJOR_ALERT_1 = 81,
    BAT_2_MAJOR_ALERT_2 = 82,
    BAT_2_MAJOR_ALERT_3 = 83,
    BAT_2_MINOR_ALERT = 84,
    BAT_3_AH_DISCHARGED = 85,
    BAT_3_SOC = 86,
    BAT_3_SOH = 87,
    BAT_3_I_BAT_I = 88,
    BAT_3_REMAINING_CAPACITY = 89,
    BAT_3_T0 = 90,
    BAT_3_T1 = 91,
    BAT_3_T2 = 92,
    BAT_3_MAJOR_ALERT_1 = 93,
    BAT_3_MAJOR_ALERT_2 = 94,
    BAT_3_MAJOR_ALERT_3 = 95,
    BAT_3_MINOR_ALERT = 96,
    MEM_USED_MB = 97,
    MEM_TOTAL = 98,
    SWAP_USED_MB = 99,
    SWAP_TOTAL = 100,
    SYSTEM_UPTIME = 101,
    CPU_USAGE_USER = 102,
    CPU_USAGE_SYSTEM = 103,
    CPU_FREQ = 104,
    RAM_USAGE = 105,
    CPU_TEMP = 106,
    TX_IN_PER_SEC = 107,
    TX_OUT_PER_SEC = 108,
    TX_QUEUE_COUNT = 109,
    CELLULAR_SIGNAL_QUALITY = 110,
    CELLULAR_NETWORK_MODE = 111,
}

impl MetricId {
    pub fn get_type(&self) -> MetricType {
        match self {
        MetricId::GPS_LON => MetricType::f32,
        MetricId::GPS_LAT => MetricType::f32,
        MetricId::GPS_SPEED => MetricType::f32,
        MetricId::GPS_COURSE => MetricType::f32,
        MetricId::GPS_ALTITUDE => MetricType::f32,
        MetricId::GPS_HOR_ERROR => MetricType::f32,
        MetricId::GPS_VELO_UNCERTAINTY => MetricType::f32,
        MetricId::GPS_VERT_UNCERTAINTY => MetricType::f32,
        MetricId::ACCELERATION_Y => MetricType::f32,
        MetricId::ACCELERATION_Z => MetricType::f32,
        MetricId::GYRO_X => MetricType::f32,
        MetricId::GYRO_Y => MetricType::f32,
        MetricId::GYRO_Z => MetricType::f32,
        MetricId::ROTATION_X => MetricType::f32,
        MetricId::ROTATION_Y => MetricType::f32,
        MetricId::ROTATION_Z => MetricType::f32,
        MetricId::FILTER_LON => MetricType::f32,
        MetricId::FILTER_LAT => MetricType::f32,
        MetricId::FILTER_ALTITUDE => MetricType::f32,
        MetricId::FILTER_SPEED => MetricType::f32,
        MetricId::FILTER_ROT_X => MetricType::f32,
        MetricId::FILTER_ROT_Y => MetricType::f32,
        MetricId::FILTER_ROT_Z => MetricType::f32,
        MetricId::APMU_TEMP => MetricType::f32,
        MetricId::MPMU_TEMP => MetricType::f32,
        MetricId::MOTOR_CURRENT => MetricType::f32,
        MetricId::BATTERY_VOLTAGE => MetricType::f32,
        MetricId::FAN_1 => MetricType::f32,
        MetricId::FAN_2 => MetricType::f32,
        MetricId::FAN_3 => MetricType::f32,
        MetricId::FAN_4 => MetricType::f32,
        MetricId::SOLAR_POWER => MetricType::f32,
        MetricId::SOLAR_TEMP => MetricType::f32,
        MetricId::MOTOR_TEMP => MetricType::f32,
        MetricId::MOTOR_INVERTER_TEMP => MetricType::f32,
        MetricId::MOTOR_BATTERY_VOLTAGE => MetricType::f32,
        MetricId::MOTOR_RPM => MetricType::f32,
        MetricId::MOTOR_POWER => MetricType::f32,
        MetricId::MOTOR_STATE => MetricType::f32,
        MetricId::ECU_MOTOR_CURRENT => MetricType::f32,
        MetricId::MOTOR_THROTTLE_POS => MetricType::f32,
        MetricId::MAX_BATTERY_DISCHARGE_CURRENT => MetricType::f32,
        MetricId::MAX_BATTERY_RECHARGE_CURRENT => MetricType::f32,
        MetricId::GLOBAL_SOC => MetricType::f32,
        MetricId::ID_GLOBAL_SOC => MetricType::f32,
        MetricId::GLOBAL_IBMS_ALARM_STATE => MetricType::f32,
        MetricId::NUMBER_OF_CONNECTED_BMS => MetricType::f32,
        MetricId::POWERBUS_INFORMATION => MetricType::f32,
        MetricId::BAT_TMIN => MetricType::f32,
        MetricId::BAT_TMAX => MetricType::f32,
        MetricId::BAT_ID_TMIN => MetricType::f32,
        MetricId::BAT_ID_TMAX => MetricType::f32,
        MetricId::BAT_VMIN => MetricType::f32,
        MetricId::BAT_VMAX => MetricType::f32,
        MetricId::BAT_ID_VMIN => MetricType::f32,
        MetricId::BAT_ID_VMAX => MetricType::f32,
        MetricId::GLOBAL_BAT_CURRENT => MetricType::f32,
        MetricId::GLOBAL_CELL_MIN => MetricType::f32,
        MetricId::GLOBAL_CELL_MAX => MetricType::f32,
        MetricId::GLOBAL_CELL_MIN_ID => MetricType::f32,
        MetricId::GLOBAL_CELL_MAX_ID => MetricType::f32,
        MetricId::BAT_1_AH_DISCHARGED => MetricType::f32,
        MetricId::BAT_1_SOC => MetricType::f32,
        MetricId::BAT_1_SOH => MetricType::f32,
        MetricId::BAT_1_I_BAT_I => MetricType::f32,
        MetricId::BAT_1_REMAINING_CAPACITY => MetricType::f32,
        MetricId::BAT_1_T0 => MetricType::f32,
        MetricId::BAT_1_T1 => MetricType::f32,
        MetricId::BAT_1_T2 => MetricType::f32,
        MetricId::BAT_1_MAJOR_ALERT_1 => MetricType::f32,
        MetricId::BAT_1_MAJOR_ALERT_2 => MetricType::f32,
        MetricId::BAT_1_MAJOR_ALERT_3 => MetricType::f32,
        MetricId::BAT_1_MINOR_ALERT => MetricType::f32,
        MetricId::BAT_2_AH_DISCHARGED => MetricType::f32,
        MetricId::BAT_2_SOC => MetricType::f32,
        MetricId::BAT_2_SOH => MetricType::f32,
        MetricId::BAT_2_I_BAT_I => MetricType::f32,
        MetricId::BAT_2_REMAINING_CAPACITY => MetricType::f32,
        MetricId::BAT_2_T0 => MetricType::f32,
        MetricId::BAT_2_T1 => MetricType::f32,
        MetricId::BAT_2_T2 => MetricType::f32,
        MetricId::BAT_2_MAJOR_ALERT_1 => MetricType::f32,
        MetricId::BAT_2_MAJOR_ALERT_2 => MetricType::f32,
        MetricId::BAT_2_MAJOR_ALERT_3 => MetricType::f32,
        MetricId::BAT_2_MINOR_ALERT => MetricType::f32,
        MetricId::BAT_3_AH_DISCHARGED => MetricType::f32,
        MetricId::BAT_3_SOC => MetricType::f32,
        MetricId::BAT_3_SOH => MetricType::f32,
        MetricId::BAT_3_I_BAT_I => MetricType::f32,
        MetricId::BAT_3_REMAINING_CAPACITY => MetricType::f32,
        MetricId::BAT_3_T0 => MetricType::f32,
        MetricId::BAT_3_T1 => MetricType::f32,
        MetricId::BAT_3_T2 => MetricType::f32,
        MetricId::BAT_3_MAJOR_ALERT_1 => MetricType::f32,
        MetricId::BAT_3_MAJOR_ALERT_2 => MetricType::f32,
        MetricId::BAT_3_MAJOR_ALERT_3 => MetricType::f32,
        MetricId::BAT_3_MINOR_ALERT => MetricType::f32,
        MetricId::MEM_USED_MB => MetricType::f32,
        MetricId::MEM_TOTAL => MetricType::f32,
        MetricId::SWAP_USED_MB => MetricType::f32,
        MetricId::SWAP_TOTAL => MetricType::f32,
        MetricId::SYSTEM_UPTIME => MetricType::f32,
        MetricId::CPU_USAGE_USER => MetricType::f32,
        MetricId::CPU_USAGE_SYSTEM => MetricType::f32,
        MetricId::CPU_FREQ => MetricType::f32,
        MetricId::RAM_USAGE => MetricType::f32,
        MetricId::CPU_TEMP => MetricType::f32,
        MetricId::TX_IN_PER_SEC => MetricType::f32,
        MetricId::TX_OUT_PER_SEC => MetricType::f32,
        MetricId::TX_QUEUE_COUNT => MetricType::f32,
        MetricId::CELLULAR_SIGNAL_QUALITY => MetricType::f32,
        MetricId::CELLULAR_NETWORK_MODE => MetricType::String,
        }
    }
}