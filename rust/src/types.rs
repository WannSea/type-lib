use std::fmt;
use std::convert::TryFrom;
    
#[derive(Debug)]
pub enum Metric {
    GpsLat = 0,
    GpsLon = 1,
    GpsSpeed = 2,
    GpsCourse = 3,
    GpsAltitude = 4,
    GpsHorError = 5,
    GpsVeloUncertainty = 6,
    GpsVertUncertainty = 7,
    AccelerationX = 8,
    AccelerationY = 9,
    AccelerationZ = 10,
    GyroX = 11,
    GyroY = 12,
    GyroZ = 13,
    RotationX = 14,
    RotationY = 15,
    RotationZ = 16,
    CpuFreq = 17,
    CpuUsage = 18,
    RamUsage = 19,
    TxQueueCount = 20,
    PendingTx = 21,
    CpuTemp = 22,
    FilterLon = 23,
    FilterLat = 24,
    FilterAltitude = 25,
    FilterSpeed = 26,
    FilterRotX = 27,
    FilterRotY = 28,
    FilterRotZ = 29,
    ApmuTemp = 30,
    MpmuTemp = 31,
    MotorCurrent = 32,
    BatteryVoltage = 33,
    Fan1 = 34,
    Fan2 = 35,
    Fan3 = 36,
    Fan4 = 37,
    SolarPower = 38,
    SolarTemp = 39,
    MotorTemp = 40,
    MotorInverterTemp = 41,
    MotorBatteryVoltage = 42,
    MotorRpm = 43,
    MotorPower = 44,
    MotorState = 45,
    EcuMotorCurrent = 46,
    MotorThrottlePos = 47,
    MaxBatteryDischargeCurrent = 48,
    MaxBatteryRechargeCurrent = 49,
    GlobalSoc = 50,
    IdGlobalSoc = 51,
    GlobalIbmsAlarmState = 52,
    NumberOfConnectedBms = 53,
    PowerbusInformation = 54,
    BatTmin = 55,
    BatTmax = 56,
    BatIdTmin = 57,
    BatIdTmax = 58,
    BatVmin = 59,
    BatVmax = 60,
    BatIdVmin = 61,
    BatIdVmax = 62,
    GlobalBatCurrent = 63,
    GlobalCellMin = 64,
    GlobalCellMax = 65,
    GlobalCellMinId = 66,
    GlobalCellMaxId  = 67,
    Bat1AhDischarged = 68,
    Bat1Soc = 69,
    Bat1Soh = 70,
    Bat1IBatI = 71,
    Bat1RemainingCapacity = 72,
    Bat1T0 = 73,
    Bat1T1 = 74,
    Bat1T2 = 75,
    Bat1MajorAlert1 = 76,
    Bat1MajorAlert2 = 77,
    Bat1MajorAlert3 = 78,
    Bat1MinorAlert = 79,
    Bat2AhDischarged = 80,
    Bat2Soc = 81,
    Bat2Soh = 82,
    Bat2IBatI = 83,
    Bat2RemainingCapacity = 84,
    Bat2T0 = 85,
    Bat2T1 = 86,
    Bat2T2 = 87,
    Bat2MajorAlert1 = 88,
    Bat2MajorAlert2 = 89,
    Bat2MajorAlert3 = 90,
    Bat2MinorAlert = 91,
    Bat3AhDischarged = 92,
    Bat3Soc = 93,
    Bat3Soh = 94,
    Bat3IBatI = 95,
    Bat3RemainingCapacity = 96,
    Bat3T0 = 97,
    Bat3T1 = 98,
    Bat3T2 = 99,
    Bat3MajorAlert1 = 100,
    Bat3MajorAlert2 = 101,
    Bat3MajorAlert3 = 102,
    Bat3MinorAlert = 103,
    MemUsedMb = 104,
    MemTotal = 105,
    SwapUsedMb = 106,
    SwapTotal = 107,
    SystemUptime = 108,
    CpuUsageUser = 109,
    CpuUsageSystem = 110
}

impl std::str::FromStr for Metric {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "GpsLat" => Ok(Metric::GpsLat),
            "GpsLon" => Ok(Metric::GpsLon),
            "GpsSpeed" => Ok(Metric::GpsSpeed),
            "GpsCourse" => Ok(Metric::GpsCourse),
            "GpsAltitude" => Ok(Metric::GpsAltitude),
            "GpsHorError" => Ok(Metric::GpsHorError),
            "GpsVeloUncertainty" => Ok(Metric::GpsVeloUncertainty),
            "GpsVertUncertainty" => Ok(Metric::GpsVertUncertainty),
            "AccelerationX" => Ok(Metric::AccelerationX),
            "AccelerationY" => Ok(Metric::AccelerationY),
            "AccelerationZ" => Ok(Metric::AccelerationZ),
            "GyroX" => Ok(Metric::GyroX),
            "GyroY" => Ok(Metric::GyroY),
            "GyroZ" => Ok(Metric::GyroZ),
            "RotationX" => Ok(Metric::RotationX),
            "RotationY" => Ok(Metric::RotationY),
            "RotationZ" => Ok(Metric::RotationZ),
            "CpuFreq" => Ok(Metric::CpuFreq),
            "CpuUsage" => Ok(Metric::CpuUsage),
            "RamUsage" => Ok(Metric::RamUsage),
            "TxQueueCount" => Ok(Metric::TxQueueCount),
            "PendingTx" => Ok(Metric::PendingTx),
            "CpuTemp" => Ok(Metric::CpuTemp),
            "FilterLon" => Ok(Metric::FilterLon),
            "FilterLat" => Ok(Metric::FilterLat),
            "FilterAltitude" => Ok(Metric::FilterAltitude),
            "FilterSpeed" => Ok(Metric::FilterSpeed),
            "FilterRotX" => Ok(Metric::FilterRotX),
            "FilterRotY" => Ok(Metric::FilterRotY),
            "FilterRotZ" => Ok(Metric::FilterRotZ),
            "ApmuTemp" => Ok(Metric::ApmuTemp),
            "MpmuTemp" => Ok(Metric::MpmuTemp),
            "MotorCurrent" => Ok(Metric::MotorCurrent),
            "BatteryVoltage" => Ok(Metric::BatteryVoltage),
            "Fan1" => Ok(Metric::Fan1),
            "Fan2" => Ok(Metric::Fan2),
            "Fan3" => Ok(Metric::Fan3),
            "Fan4" => Ok(Metric::Fan4),
            "SolarPower" => Ok(Metric::SolarPower),
            "SolarTemp" => Ok(Metric::SolarTemp),
            "MotorTemp" => Ok(Metric::MotorTemp),
            "MotorInverterTemp" => Ok(Metric::MotorInverterTemp),
            "MotorBatteryVoltage" => Ok(Metric::MotorBatteryVoltage),
            "MotorRpm" => Ok(Metric::MotorRpm),
            "MotorPower" => Ok(Metric::MotorPower),
            "MotorState" => Ok(Metric::MotorState),
            "EcuMotorCurrent" => Ok(Metric::EcuMotorCurrent),
            "MotorThrottlePos" => Ok(Metric::MotorThrottlePos),
            "MaxBatteryDischargeCurrent" => Ok(Metric::MaxBatteryDischargeCurrent),
            "MaxBatteryRechargeCurrent" => Ok(Metric::MaxBatteryRechargeCurrent),
            "GlobalSoc" => Ok(Metric::GlobalSoc),
            "IdGlobalSoc" => Ok(Metric::IdGlobalSoc),
            "GlobalIbmsAlarmState" => Ok(Metric::GlobalIbmsAlarmState),
            "NumberOfConnectedBms" => Ok(Metric::NumberOfConnectedBms),
            "PowerbusInformation" => Ok(Metric::PowerbusInformation),
            "BatTmin" => Ok(Metric::BatTmin),
            "BatTmax" => Ok(Metric::BatTmax),
            "BatIdTmin" => Ok(Metric::BatIdTmin),
            "BatIdTmax" => Ok(Metric::BatIdTmax),
            "BatVmin" => Ok(Metric::BatVmin),
            "BatVmax" => Ok(Metric::BatVmax),
            "BatIdVmin" => Ok(Metric::BatIdVmin),
            "BatIdVmax" => Ok(Metric::BatIdVmax),
            "GlobalBatCurrent" => Ok(Metric::GlobalBatCurrent),
            "GlobalCellMin" => Ok(Metric::GlobalCellMin),
            "GlobalCellMax" => Ok(Metric::GlobalCellMax),
            "GlobalCellMinId" => Ok(Metric::GlobalCellMinId),
            "GlobalCellMaxId " => Ok(Metric::GlobalCellMaxId ),
            "Bat1AhDischarged" => Ok(Metric::Bat1AhDischarged),
            "Bat1Soc" => Ok(Metric::Bat1Soc),
            "Bat1Soh" => Ok(Metric::Bat1Soh),
            "Bat1IBatI" => Ok(Metric::Bat1IBatI),
            "Bat1RemainingCapacity" => Ok(Metric::Bat1RemainingCapacity),
            "Bat1T0" => Ok(Metric::Bat1T0),
            "Bat1T1" => Ok(Metric::Bat1T1),
            "Bat1T2" => Ok(Metric::Bat1T2),
            "Bat1MajorAlert1" => Ok(Metric::Bat1MajorAlert1),
            "Bat1MajorAlert2" => Ok(Metric::Bat1MajorAlert2),
            "Bat1MajorAlert3" => Ok(Metric::Bat1MajorAlert3),
            "Bat1MinorAlert" => Ok(Metric::Bat1MinorAlert),
            "Bat2AhDischarged" => Ok(Metric::Bat2AhDischarged),
            "Bat2Soc" => Ok(Metric::Bat2Soc),
            "Bat2Soh" => Ok(Metric::Bat2Soh),
            "Bat2IBatI" => Ok(Metric::Bat2IBatI),
            "Bat2RemainingCapacity" => Ok(Metric::Bat2RemainingCapacity),
            "Bat2T0" => Ok(Metric::Bat2T0),
            "Bat2T1" => Ok(Metric::Bat2T1),
            "Bat2T2" => Ok(Metric::Bat2T2),
            "Bat2MajorAlert1" => Ok(Metric::Bat2MajorAlert1),
            "Bat2MajorAlert2" => Ok(Metric::Bat2MajorAlert2),
            "Bat2MajorAlert3" => Ok(Metric::Bat2MajorAlert3),
            "Bat2MinorAlert" => Ok(Metric::Bat2MinorAlert),
            "Bat3AhDischarged" => Ok(Metric::Bat3AhDischarged),
            "Bat3Soc" => Ok(Metric::Bat3Soc),
            "Bat3Soh" => Ok(Metric::Bat3Soh),
            "Bat3IBatI" => Ok(Metric::Bat3IBatI),
            "Bat3RemainingCapacity" => Ok(Metric::Bat3RemainingCapacity),
            "Bat3T0" => Ok(Metric::Bat3T0),
            "Bat3T1" => Ok(Metric::Bat3T1),
            "Bat3T2" => Ok(Metric::Bat3T2),
            "Bat3MajorAlert1" => Ok(Metric::Bat3MajorAlert1),
            "Bat3MajorAlert2" => Ok(Metric::Bat3MajorAlert2),
            "Bat3MajorAlert3" => Ok(Metric::Bat3MajorAlert3),
            "Bat3MinorAlert" => Ok(Metric::Bat3MinorAlert),
            "MemUsedMb" => Ok(Metric::MemUsedMb),
            "MemTotal" => Ok(Metric::MemTotal),
            "SwapUsedMb" => Ok(Metric::SwapUsedMb),
            "SwapTotal" => Ok(Metric::SwapTotal),
            "SystemUptime" => Ok(Metric::SystemUptime),
            "CpuUsageUser" => Ok(Metric::CpuUsageUser),
            "CpuUsageSystem" => Ok(Metric::CpuUsageSystem),
            _ => Err(format!("'{}' is not a valid value for Metric", s)),
        }
    }
}

impl fmt::Display for Metric {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}


impl TryFrom<i32> for Metric {
    type Error = ();

    fn try_from(v: i32) -> Result<Self, Self::Error> {
        match v {
            0 if 0 == Metric::GpsLat as i32 => Ok(Metric::GpsLat),
            1 if 1 == Metric::GpsLon as i32 => Ok(Metric::GpsLon),
            2 if 2 == Metric::GpsSpeed as i32 => Ok(Metric::GpsSpeed),
            3 if 3 == Metric::GpsCourse as i32 => Ok(Metric::GpsCourse),
            4 if 4 == Metric::GpsAltitude as i32 => Ok(Metric::GpsAltitude),
            5 if 5 == Metric::GpsHorError as i32 => Ok(Metric::GpsHorError),
            6 if 6 == Metric::GpsVeloUncertainty as i32 => Ok(Metric::GpsVeloUncertainty),
            7 if 7 == Metric::GpsVertUncertainty as i32 => Ok(Metric::GpsVertUncertainty),
            8 if 8 == Metric::AccelerationX as i32 => Ok(Metric::AccelerationX),
            9 if 9 == Metric::AccelerationY as i32 => Ok(Metric::AccelerationY),
            10 if 10 == Metric::AccelerationZ as i32 => Ok(Metric::AccelerationZ),
            11 if 11 == Metric::GyroX as i32 => Ok(Metric::GyroX),
            12 if 12 == Metric::GyroY as i32 => Ok(Metric::GyroY),
            13 if 13 == Metric::GyroZ as i32 => Ok(Metric::GyroZ),
            14 if 14 == Metric::RotationX as i32 => Ok(Metric::RotationX),
            15 if 15 == Metric::RotationY as i32 => Ok(Metric::RotationY),
            16 if 16 == Metric::RotationZ as i32 => Ok(Metric::RotationZ),
            17 if 17 == Metric::CpuFreq as i32 => Ok(Metric::CpuFreq),
            18 if 18 == Metric::CpuUsage as i32 => Ok(Metric::CpuUsage),
            19 if 19 == Metric::RamUsage as i32 => Ok(Metric::RamUsage),
            20 if 20 == Metric::TxQueueCount as i32 => Ok(Metric::TxQueueCount),
            21 if 21 == Metric::PendingTx as i32 => Ok(Metric::PendingTx),
            22 if 22 == Metric::CpuTemp as i32 => Ok(Metric::CpuTemp),
            23 if 23 == Metric::FilterLon as i32 => Ok(Metric::FilterLon),
            24 if 24 == Metric::FilterLat as i32 => Ok(Metric::FilterLat),
            25 if 25 == Metric::FilterAltitude as i32 => Ok(Metric::FilterAltitude),
            26 if 26 == Metric::FilterSpeed as i32 => Ok(Metric::FilterSpeed),
            27 if 27 == Metric::FilterRotX as i32 => Ok(Metric::FilterRotX),
            28 if 28 == Metric::FilterRotY as i32 => Ok(Metric::FilterRotY),
            29 if 29 == Metric::FilterRotZ as i32 => Ok(Metric::FilterRotZ),
            30 if 30 == Metric::ApmuTemp as i32 => Ok(Metric::ApmuTemp),
            31 if 31 == Metric::MpmuTemp as i32 => Ok(Metric::MpmuTemp),
            32 if 32 == Metric::MotorCurrent as i32 => Ok(Metric::MotorCurrent),
            33 if 33 == Metric::BatteryVoltage as i32 => Ok(Metric::BatteryVoltage),
            34 if 34 == Metric::Fan1 as i32 => Ok(Metric::Fan1),
            35 if 35 == Metric::Fan2 as i32 => Ok(Metric::Fan2),
            36 if 36 == Metric::Fan3 as i32 => Ok(Metric::Fan3),
            37 if 37 == Metric::Fan4 as i32 => Ok(Metric::Fan4),
            38 if 38 == Metric::SolarPower as i32 => Ok(Metric::SolarPower),
            39 if 39 == Metric::SolarTemp as i32 => Ok(Metric::SolarTemp),
            40 if 40 == Metric::MotorTemp as i32 => Ok(Metric::MotorTemp),
            41 if 41 == Metric::MotorInverterTemp as i32 => Ok(Metric::MotorInverterTemp),
            42 if 42 == Metric::MotorBatteryVoltage as i32 => Ok(Metric::MotorBatteryVoltage),
            43 if 43 == Metric::MotorRpm as i32 => Ok(Metric::MotorRpm),
            44 if 44 == Metric::MotorPower as i32 => Ok(Metric::MotorPower),
            45 if 45 == Metric::MotorState as i32 => Ok(Metric::MotorState),
            46 if 46 == Metric::EcuMotorCurrent as i32 => Ok(Metric::EcuMotorCurrent),
            47 if 47 == Metric::MotorThrottlePos as i32 => Ok(Metric::MotorThrottlePos),
            48 if 48 == Metric::MaxBatteryDischargeCurrent as i32 => Ok(Metric::MaxBatteryDischargeCurrent),
            49 if 49 == Metric::MaxBatteryRechargeCurrent as i32 => Ok(Metric::MaxBatteryRechargeCurrent),
            50 if 50 == Metric::GlobalSoc as i32 => Ok(Metric::GlobalSoc),
            51 if 51 == Metric::IdGlobalSoc as i32 => Ok(Metric::IdGlobalSoc),
            52 if 52 == Metric::GlobalIbmsAlarmState as i32 => Ok(Metric::GlobalIbmsAlarmState),
            53 if 53 == Metric::NumberOfConnectedBms as i32 => Ok(Metric::NumberOfConnectedBms),
            54 if 54 == Metric::PowerbusInformation as i32 => Ok(Metric::PowerbusInformation),
            55 if 55 == Metric::BatTmin as i32 => Ok(Metric::BatTmin),
            56 if 56 == Metric::BatTmax as i32 => Ok(Metric::BatTmax),
            57 if 57 == Metric::BatIdTmin as i32 => Ok(Metric::BatIdTmin),
            58 if 58 == Metric::BatIdTmax as i32 => Ok(Metric::BatIdTmax),
            59 if 59 == Metric::BatVmin as i32 => Ok(Metric::BatVmin),
            60 if 60 == Metric::BatVmax as i32 => Ok(Metric::BatVmax),
            61 if 61 == Metric::BatIdVmin as i32 => Ok(Metric::BatIdVmin),
            62 if 62 == Metric::BatIdVmax as i32 => Ok(Metric::BatIdVmax),
            63 if 63 == Metric::GlobalBatCurrent as i32 => Ok(Metric::GlobalBatCurrent),
            64 if 64 == Metric::GlobalCellMin as i32 => Ok(Metric::GlobalCellMin),
            65 if 65 == Metric::GlobalCellMax as i32 => Ok(Metric::GlobalCellMax),
            66 if 66 == Metric::GlobalCellMinId as i32 => Ok(Metric::GlobalCellMinId),
            67 if 67 == Metric::GlobalCellMaxId  as i32 => Ok(Metric::GlobalCellMaxId ),
            68 if 68 == Metric::Bat1AhDischarged as i32 => Ok(Metric::Bat1AhDischarged),
            69 if 69 == Metric::Bat1Soc as i32 => Ok(Metric::Bat1Soc),
            70 if 70 == Metric::Bat1Soh as i32 => Ok(Metric::Bat1Soh),
            71 if 71 == Metric::Bat1IBatI as i32 => Ok(Metric::Bat1IBatI),
            72 if 72 == Metric::Bat1RemainingCapacity as i32 => Ok(Metric::Bat1RemainingCapacity),
            73 if 73 == Metric::Bat1T0 as i32 => Ok(Metric::Bat1T0),
            74 if 74 == Metric::Bat1T1 as i32 => Ok(Metric::Bat1T1),
            75 if 75 == Metric::Bat1T2 as i32 => Ok(Metric::Bat1T2),
            76 if 76 == Metric::Bat1MajorAlert1 as i32 => Ok(Metric::Bat1MajorAlert1),
            77 if 77 == Metric::Bat1MajorAlert2 as i32 => Ok(Metric::Bat1MajorAlert2),
            78 if 78 == Metric::Bat1MajorAlert3 as i32 => Ok(Metric::Bat1MajorAlert3),
            79 if 79 == Metric::Bat1MinorAlert as i32 => Ok(Metric::Bat1MinorAlert),
            80 if 80 == Metric::Bat2AhDischarged as i32 => Ok(Metric::Bat2AhDischarged),
            81 if 81 == Metric::Bat2Soc as i32 => Ok(Metric::Bat2Soc),
            82 if 82 == Metric::Bat2Soh as i32 => Ok(Metric::Bat2Soh),
            83 if 83 == Metric::Bat2IBatI as i32 => Ok(Metric::Bat2IBatI),
            84 if 84 == Metric::Bat2RemainingCapacity as i32 => Ok(Metric::Bat2RemainingCapacity),
            85 if 85 == Metric::Bat2T0 as i32 => Ok(Metric::Bat2T0),
            86 if 86 == Metric::Bat2T1 as i32 => Ok(Metric::Bat2T1),
            87 if 87 == Metric::Bat2T2 as i32 => Ok(Metric::Bat2T2),
            88 if 88 == Metric::Bat2MajorAlert1 as i32 => Ok(Metric::Bat2MajorAlert1),
            89 if 89 == Metric::Bat2MajorAlert2 as i32 => Ok(Metric::Bat2MajorAlert2),
            90 if 90 == Metric::Bat2MajorAlert3 as i32 => Ok(Metric::Bat2MajorAlert3),
            91 if 91 == Metric::Bat2MinorAlert as i32 => Ok(Metric::Bat2MinorAlert),
            92 if 92 == Metric::Bat3AhDischarged as i32 => Ok(Metric::Bat3AhDischarged),
            93 if 93 == Metric::Bat3Soc as i32 => Ok(Metric::Bat3Soc),
            94 if 94 == Metric::Bat3Soh as i32 => Ok(Metric::Bat3Soh),
            95 if 95 == Metric::Bat3IBatI as i32 => Ok(Metric::Bat3IBatI),
            96 if 96 == Metric::Bat3RemainingCapacity as i32 => Ok(Metric::Bat3RemainingCapacity),
            97 if 97 == Metric::Bat3T0 as i32 => Ok(Metric::Bat3T0),
            98 if 98 == Metric::Bat3T1 as i32 => Ok(Metric::Bat3T1),
            99 if 99 == Metric::Bat3T2 as i32 => Ok(Metric::Bat3T2),
            100 if 100 == Metric::Bat3MajorAlert1 as i32 => Ok(Metric::Bat3MajorAlert1),
            101 if 101 == Metric::Bat3MajorAlert2 as i32 => Ok(Metric::Bat3MajorAlert2),
            102 if 102 == Metric::Bat3MajorAlert3 as i32 => Ok(Metric::Bat3MajorAlert3),
            103 if 103 == Metric::Bat3MinorAlert as i32 => Ok(Metric::Bat3MinorAlert),
            104 if 104 == Metric::MemUsedMb as i32 => Ok(Metric::MemUsedMb),
            105 if 105 == Metric::MemTotal as i32 => Ok(Metric::MemTotal),
            106 if 106 == Metric::SwapUsedMb as i32 => Ok(Metric::SwapUsedMb),
            107 if 107 == Metric::SwapTotal as i32 => Ok(Metric::SwapTotal),
            108 if 108 == Metric::SystemUptime as i32 => Ok(Metric::SystemUptime),
            109 if 109 == Metric::CpuUsageUser as i32 => Ok(Metric::CpuUsageUser),
            110 if 110 == Metric::CpuUsageSystem as i32 => Ok(Metric::CpuUsageSystem),
            _ => Err(()),
        }
    }
}
    