pub enum Metric {
    GpsLat = 0,
    GpsLon = 1,
    GpsSpeed = 2,
    GpsCourse = 3,
    GpsAltitude = 4,
    GpsHorError = 5,
    GpsVeloUncertainty = 6,
    GpsVertUncertainty = 7,
    AccelerationX = 8,
    AccelerationY = 9,
    AccelerationZ = 10,
    GyroX = 11,
    GyroY = 12,
    GyroZ = 13,
    RotationX = 14,
    RotationY = 15,
    RotationZ = 16,
    CpuFreq = 17,
    CpuUsage = 18,
    RamUsage = 19,
    TxQueueCount = 20,
    PendingTx = 21,
    CpuTemp = 22,
    FilterLon = 23,
    FilterLat = 24,
    FilterAltitude = 25,
    FilterSpeed = 26,
    FilterRotX = 27,
    FilterRotY = 28,
    FilterRotZ = 29,
    ApmuTemp = 30,
    MpmuTemp = 31,
    MotorCurrent = 32,
    BatteryVoltage = 33,
    Fan1 = 34,
    Fan2 = 35,
    Fan3 = 36,
    Fan4 = 37,
    SolarPower = 38,
    SolarTemp = 39,
    MotorTemp = 40,
    MotorInverterTemp = 41,
    MotorBatteryVoltage = 42,
    MotorRpm = 43,
    MotorPower = 44,
    MotorState = 45,
    EcuMotorCurrent = 46,
    MotorThrottlePos = 47,
    MaxBatteryDischargeCurrent = 48,
    MaxBatteryRechargeCurrent = 49,
    GlobalSoc = 50,
    IdGlobalSoc = 51,
    GlobalIbmsAlarmState = 52,
    NumberOfConnectedBms = 53,
    PowerbusInformation = 54,
    BatTmin = 55,
    BatTmax = 56,
    BatIdTmin = 57,
    BatIdTmax = 58,
    BatVmin = 59,
    BatVmax = 60,
    BatIdVmin = 61,
    BatIdVmax = 62,
    GlobalBatCurrent = 63,
    GlobalCellMin = 64,
    GlobalCellMax = 65,
    GlobalCellMinId = 66,
    GlobalCellMaxId  = 67,
    Bat1AhDischarged = 68,
    Bat1Soc = 69,
    Bat1Soh = 70,
    Bat1IBatI = 71,
    Bat1RemainingCapacity = 72,
    Bat1T0 = 73,
    Bat1T1 = 74,
    Bat1T2 = 75,
    Bat1MajorAlert1 = 76,
    Bat1MajorAlert2 = 77,
    Bat1MajorAlert3 = 78,
    Bat1MinorAlert = 79,
    Bat2AhDischarged = 80,
    Bat2Soc = 81,
    Bat2Soh = 82,
    Bat2IBatI = 83,
    Bat2RemainingCapacity = 84,
    Bat2T0 = 85,
    Bat2T1 = 86,
    Bat2T2 = 87,
    Bat2MajorAlert1 = 88,
    Bat2MajorAlert2 = 89,
    Bat2MajorAlert3 = 90,
    Bat2MinorAlert = 91,
    Bat3AhDischarged = 92,
    Bat3Soc = 93,
    Bat3Soh = 94,
    Bat3IBatI = 95,
    Bat3RemainingCapacity = 96,
    Bat3T0 = 97,
    Bat3T1 = 98,
    Bat3T2 = 99,
    Bat3MajorAlert1 = 100,
    Bat3MajorAlert2 = 101,
    Bat3MajorAlert3 = 102,
    Bat3MinorAlert = 103,
    MemUsedMb = 104,
    MemTotal = 105,
    SwapUsedMb = 106,
    SwapTotal = 107,
    SystemUptime = 108,
    CpuUsageUser = 109,
    CpuUsageSystem = 110
}

impl std::str::FromStr for Metric {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "GpsLat" => Ok(Metric::GpsLat),
            "GpsLon" => Ok(Metric::GpsLon),
            "GpsSpeed" => Ok(Metric::GpsSpeed),
            "GpsCourse" => Ok(Metric::GpsCourse),
            "GpsAltitude" => Ok(Metric::GpsAltitude),
            "GpsHorError" => Ok(Metric::GpsHorError),
            "GpsVeloUncertainty" => Ok(Metric::GpsVeloUncertainty),
            "GpsVertUncertainty" => Ok(Metric::GpsVertUncertainty),
            "AccelerationX" => Ok(Metric::AccelerationX),
            "AccelerationY" => Ok(Metric::AccelerationY),
            "AccelerationZ" => Ok(Metric::AccelerationZ),
            "GyroX" => Ok(Metric::GyroX),
            "GyroY" => Ok(Metric::GyroY),
            "GyroZ" => Ok(Metric::GyroZ),
            "RotationX" => Ok(Metric::RotationX),
            "RotationY" => Ok(Metric::RotationY),
            "RotationZ" => Ok(Metric::RotationZ),
            "CpuFreq" => Ok(Metric::CpuFreq),
            "CpuUsage" => Ok(Metric::CpuUsage),
            "RamUsage" => Ok(Metric::RamUsage),
            "TxQueueCount" => Ok(Metric::TxQueueCount),
            "PendingTx" => Ok(Metric::PendingTx),
            "CpuTemp" => Ok(Metric::CpuTemp),
            "FilterLon" => Ok(Metric::FilterLon),
            "FilterLat" => Ok(Metric::FilterLat),
            "FilterAltitude" => Ok(Metric::FilterAltitude),
            "FilterSpeed" => Ok(Metric::FilterSpeed),
            "FilterRotX" => Ok(Metric::FilterRotX),
            "FilterRotY" => Ok(Metric::FilterRotY),
            "FilterRotZ" => Ok(Metric::FilterRotZ),
            "ApmuTemp" => Ok(Metric::ApmuTemp),
            "MpmuTemp" => Ok(Metric::MpmuTemp),
            "MotorCurrent" => Ok(Metric::MotorCurrent),
            "BatteryVoltage" => Ok(Metric::BatteryVoltage),
            "Fan1" => Ok(Metric::Fan1),
            "Fan2" => Ok(Metric::Fan2),
            "Fan3" => Ok(Metric::Fan3),
            "Fan4" => Ok(Metric::Fan4),
            "SolarPower" => Ok(Metric::SolarPower),
            "SolarTemp" => Ok(Metric::SolarTemp),
            "MotorTemp" => Ok(Metric::MotorTemp),
            "MotorInverterTemp" => Ok(Metric::MotorInverterTemp),
            "MotorBatteryVoltage" => Ok(Metric::MotorBatteryVoltage),
            "MotorRpm" => Ok(Metric::MotorRpm),
            "MotorPower" => Ok(Metric::MotorPower),
            "MotorState" => Ok(Metric::MotorState),
            "EcuMotorCurrent" => Ok(Metric::EcuMotorCurrent),
            "MotorThrottlePos" => Ok(Metric::MotorThrottlePos),
            "MaxBatteryDischargeCurrent" => Ok(Metric::MaxBatteryDischargeCurrent),
            "MaxBatteryRechargeCurrent" => Ok(Metric::MaxBatteryRechargeCurrent),
            "GlobalSoc" => Ok(Metric::GlobalSoc),
            "IdGlobalSoc" => Ok(Metric::IdGlobalSoc),
            "GlobalIbmsAlarmState" => Ok(Metric::GlobalIbmsAlarmState),
            "NumberOfConnectedBms" => Ok(Metric::NumberOfConnectedBms),
            "PowerbusInformation" => Ok(Metric::PowerbusInformation),
            "BatTmin" => Ok(Metric::BatTmin),
            "BatTmax" => Ok(Metric::BatTmax),
            "BatIdTmin" => Ok(Metric::BatIdTmin),
            "BatIdTmax" => Ok(Metric::BatIdTmax),
            "BatVmin" => Ok(Metric::BatVmin),
            "BatVmax" => Ok(Metric::BatVmax),
            "BatIdVmin" => Ok(Metric::BatIdVmin),
            "BatIdVmax" => Ok(Metric::BatIdVmax),
            "GlobalBatCurrent" => Ok(Metric::GlobalBatCurrent),
            "GlobalCellMin" => Ok(Metric::GlobalCellMin),
            "GlobalCellMax" => Ok(Metric::GlobalCellMax),
            "GlobalCellMinId" => Ok(Metric::GlobalCellMinId),
            "GlobalCellMaxId " => Ok(Metric::GlobalCellMaxId ),
            "Bat1AhDischarged" => Ok(Metric::Bat1AhDischarged),
            "Bat1Soc" => Ok(Metric::Bat1Soc),
            "Bat1Soh" => Ok(Metric::Bat1Soh),
            "Bat1IBatI" => Ok(Metric::Bat1IBatI),
            "Bat1RemainingCapacity" => Ok(Metric::Bat1RemainingCapacity),
            "Bat1T0" => Ok(Metric::Bat1T0),
            "Bat1T1" => Ok(Metric::Bat1T1),
            "Bat1T2" => Ok(Metric::Bat1T2),
            "Bat1MajorAlert1" => Ok(Metric::Bat1MajorAlert1),
            "Bat1MajorAlert2" => Ok(Metric::Bat1MajorAlert2),
            "Bat1MajorAlert3" => Ok(Metric::Bat1MajorAlert3),
            "Bat1MinorAlert" => Ok(Metric::Bat1MinorAlert),
            "Bat2AhDischarged" => Ok(Metric::Bat2AhDischarged),
            "Bat2Soc" => Ok(Metric::Bat2Soc),
            "Bat2Soh" => Ok(Metric::Bat2Soh),
            "Bat2IBatI" => Ok(Metric::Bat2IBatI),
            "Bat2RemainingCapacity" => Ok(Metric::Bat2RemainingCapacity),
            "Bat2T0" => Ok(Metric::Bat2T0),
            "Bat2T1" => Ok(Metric::Bat2T1),
            "Bat2T2" => Ok(Metric::Bat2T2),
            "Bat2MajorAlert1" => Ok(Metric::Bat2MajorAlert1),
            "Bat2MajorAlert2" => Ok(Metric::Bat2MajorAlert2),
            "Bat2MajorAlert3" => Ok(Metric::Bat2MajorAlert3),
            "Bat2MinorAlert" => Ok(Metric::Bat2MinorAlert),
            "Bat3AhDischarged" => Ok(Metric::Bat3AhDischarged),
            "Bat3Soc" => Ok(Metric::Bat3Soc),
            "Bat3Soh" => Ok(Metric::Bat3Soh),
            "Bat3IBatI" => Ok(Metric::Bat3IBatI),
            "Bat3RemainingCapacity" => Ok(Metric::Bat3RemainingCapacity),
            "Bat3T0" => Ok(Metric::Bat3T0),
            "Bat3T1" => Ok(Metric::Bat3T1),
            "Bat3T2" => Ok(Metric::Bat3T2),
            "Bat3MajorAlert1" => Ok(Metric::Bat3MajorAlert1),
            "Bat3MajorAlert2" => Ok(Metric::Bat3MajorAlert2),
            "Bat3MajorAlert3" => Ok(Metric::Bat3MajorAlert3),
            "Bat3MinorAlert" => Ok(Metric::Bat3MinorAlert),
            "MemUsedMb" => Ok(Metric::MemUsedMb),
            "MemTotal" => Ok(Metric::MemTotal),
            "SwapUsedMb" => Ok(Metric::SwapUsedMb),
            "SwapTotal" => Ok(Metric::SwapTotal),
            "SystemUptime" => Ok(Metric::SystemUptime),
            "CpuUsageUser" => Ok(Metric::CpuUsageUser),
            "CpuUsageSystem" => Ok(Metric::CpuUsageSystem),
            _ => Err(format!("'{}' is not a valid value for Metric", s)),
        }
    }
}
    